#include <unistd.h>

void ft_putchar(char c)
{
    write(STDOUT_FILENO, &c, 1);
}

void	ft_putstr(char *str)
{
	write(STDOUT_FILENO, str, ft_strlen(str));
}

void	ft_putnbr(int nb)
{

	if (nb < 0)
	{
		ft_putchar('-');
		nb = - nb;
	}
	if (nb < 10)
	{
		ft_putchar(nb + '0');
	}
	else
	{
		ft_putnbr(nb / 10);
		ft_putnbr(nb % 10);
	}
}

int ft_str_is_alpha(char *str)
{
	if (!*str)
		return (1);
	while (*str)
	{
		if (!((*str >= 'a' && *str <= 'z') || (*str >= 'A' && *str <= 'Z')))
			return (0);
		str++;
	}
	return (1);
}

int ft_str_is_numeric(char *str)
{
	if (!*str)
		return (1);
	while (*str)
	{
		if (!(*str >= '0' && *str <= '9'))
			return (0);
		str++;
	}
	return (1);
}

int ft_str_is_printable(char *str)
{
	if (!*str)
		return (1);
	while (*str)
	{
		if (!(*str >= 33 && *str <= 126))
			return (0);
		str++;
	}
	return (1);
}

char *ft_strcapitalize(char *str)
{
	int i;
	int j;

	i = 0;
	while (str[i])
	{
		j = 0;
		while ((str[i] >= 'A' && str[i] <= 'Z')
				|| (str[i] >= 'a' && str[i] <= 'z')
				|| (str[i] >= '0' && str[i] <= '9'))
		{
			if (j == 0 && str[i] <= 'z' && str[i] >= 'a')
				str[i] -= 32;
			j++;
			i++;
		}
		i++;
	}
	return (str);
}

char *ft_strcat(char *dest, char *src)
{
	char *res;

	res = dest;
	while (*dest)
		dest++;
	while (*src)
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = *src;
	return (res);
}	

int ft_strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && !(*s1 - *s2))
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}	

char *ft_strcpy(char *dest, char *src)
{
	char *res;

	res = dest;
	while (*src)
	{
		*dest = *src;
		src++;
		dest++;
	}
	*dest = *src;
	return (res);
}

int ft_strlen(char *str)
{
	int i;

	i = 0;
	while (str[i])
		i++;
	return (i);
}

int ft_strncmp(char *s1, char *s2, unsigned int n)
{
	while (n && *s1 && *s2 && !(*s1 - *s2))
	{
		s1++;
		s2++;
		n--;
	}
	return (*s1 - *s2);
}

char	*ft_strncpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	i = 0;
	while (src[i] && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	while (dest[i])
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

char *ft_strstr(char *str, char *to_find)
{
	unsigned int	i;
	unsigned int	j;
	int				test;

	i = 0;
	while (str[i])
	{
		j = 0;
		test = 1;
		while (test && to_find[j])
		{
			if (str[i + j] && to_find[j] == str[i + j])
				j++;
			else
				test = 0;
		}
		if (!to_find[j])
			return (str + i);
		i++;
	}
	return (0);
}

void	ft_swap(int *a, int *b)
{
	int temp;

	temp = *a;
	*a = *b;
	*b = temp;
}

int ft_atoi(char *str)
{
	int	res;
	int i;
	int negative;

	res = 0;
	i = 0;
	negative = 0;
	if (*str == '-')
	{
		negative = 1;
		str++;
	}
	while (*str)
	{
		res = *str - '0' + res * 10;
		str++;
	}
	if (negative)
	{
		res = 0 - res;
	}
	return (res);
}

int ft_factorial(int nb)
{
	if (nb > 12 || nb < 0)
		return (0);
	if (nb == 2 || nb == 1)
		return (nb);
	if (nb == 0)
		return (1);
	return (nb * ft_factorial(nb - 1));
}

void	ft_div_mod(int a, int b, int *div, int *mod)
{
	*div = a / b;
	*mod = a % b;
}

int ft_power(int nb, int power)
{
	int res;

	if (power == 0)
		res = 1;
	else if (power == 1)
		res = nb;
	else
		res = nb * ft_power(nb, power - 1);
	return (res);
}

int ft_fibonacci(int index)
{
	int res;

	if (index < 0)
		res = -1;
	else if (index == 0)
		res = 0;
	else if (index == 1)
		res = 1;
	else
		res = ft_fibonacci(index - 1) + ft_fibonacci(index - 2);
	return (res);
}

char *ft_strlowcase(char *str)
{
	char *p;

	p = str;
	while (*str)
	{
		if (*str >= 'A' && *str <= 'Z')
			*str += 32;
		str++;
	}
	return (p);
}

char *ft_strupcase(char *str)
{
	char *p;

	p = str;
	while (*str)
	{
		if (*str >= 'a' && *str <= 'z')
			*str -= 32;
		str++;
	}
	return (p);
}
